import logging
import time

import telebot
from keyboards import make_inline_keyboard, make_reply_keyboard
from config import (BOT_TOKEN, ADMIN_ID, LOGS, COUNT_LAST_MSG, CONTENT_TYPES, BOT_NAME, BOT_DESCRIPTION, COMMANDS,
                    USE_GRAMMAR_CHECK, MAX_USER_GPT_TOKENS, MAX_USER_TTS_SYMBOLS, MAX_USER_STT_BLOCKS, ABOUT_BOT,
                    IS_PROCESSING_ANSWER_MSG, START_MSG)
from database import (create_database, add_message, select_n_last_messages, find_user_data, add_user_to_database,
                      update_user_data, count_all_limits)
from validators import is_gpt_token_limit, is_stt_block_limit, is_tts_symbol_limit, check_number_of_users
from yandex_gpt import ask_gpt
from speech_kit import speech_to_text, text_to_speech
from grammar_check import check_grammar

# –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
logging.basicConfig(filename=LOGS,
                    level=logging.INFO,
                    format="%(asctime)s FILE: %(filename)s IN: %(funcName)s MESSAGE: %(message)s",
                    filemode="w",
                    force=True)


create_database()

bot = telebot.TeleBot(token=BOT_TOKEN)


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /debug - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏
@bot.message_handler(commands=['debug'])
def debug(message):
    user_id = message.from_user.id

    is_processing_answer = check_processing_answer(message, user_id)

    if is_processing_answer:
        return

    if user_id == int(ADMIN_ID):
        check_user_exists(user_id)

        with open(LOGS, "rb") as f:
            bot.send_document(message.chat.id, f)

    else:
        bot.send_message(message.chat.id, "–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ!")


# –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å –≤–µ–∑–¥–µ, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞ users,
# —Ç.–∫. –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —á–∞—Ç —Å –±–æ—Ç–æ–º, –∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞, –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∏.
def check_user_exists(user_id):
    is_user = find_user_data(user_id)

    if not is_user:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        add_user_to_database(user_id)


def check_processing_answer(message, user_id):
    if find_user_data(user_id)["processing_answer"]:
        bot.reply_to(message, text=IS_PROCESSING_ANSWER_MSG)
        return True


@bot.message_handler(commands=["start"])
def get_started(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    status_check_users, error_message = check_number_of_users(user_id)

    if not status_check_users:
        bot.send_message(message.chat.id, error_message)
        return

    check_user_exists(user_id)

    is_processing_answer = check_processing_answer(message, user_id)

    if is_processing_answer:
        return

    keyboard = make_reply_keyboard("main_menu")
    bot.send_message(message.chat.id, text=START_MSG, reply_markup=keyboard)


@bot.message_handler(commands=["help"])
def about_bot(message):
    bot.send_message(message.chat.id, text=ABOUT_BOT, parse_mode="html")


def process_stt(message, user_id):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ-–±–ª–æ–∫–æ–≤
    stt_blocks, error_message = is_stt_block_limit(user_id, message.voice.duration)

    if error_message:
        bot.send_message(message.chat.id, error_message, parse_mode="html")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    file_id = message.voice.file_id
    file_info = bot.get_file(file_id)
    file = bot.download_file(file_info.file_path)

    update_user_data(user_id, column_name="processing_answer", value=1)

    status_stt, stt_text = speech_to_text(file)

    update_user_data(user_id, column_name="processing_answer", value=0)

    if not status_stt:
        bot.send_message(message.chat.id, stt_text)
        return

    if USE_GRAMMAR_CHECK:
        stt_text = check_grammar(stt_text)

    # –ó–∞–ø–∏—Å—å –≤ –ë–î
    add_message(user_id=user_id, full_message=[stt_text, 'user', 0, 0, stt_blocks])

    return stt_text


def process_tts(message, user_id, text, total_gpt_tokens, testing=False):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è SpeechKit
    tts_symbols, error_message = is_tts_symbol_limit(user_id, text)

    # –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ GPT –≤ –ë–î
    add_message(user_id=user_id, full_message=[text, 'assistant', total_gpt_tokens, tts_symbols, 0])

    if error_message:
        bot.send_message(message.chat.id, error_message)
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∞—É–¥–∏–æ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    update_user_data(user_id, column_name="processing_answer", value=1)

    status_tts, voice_response = text_to_speech(text)

    update_user_data(user_id, column_name="processing_answer", value=0)

    if status_tts:
        gpt_voice_answer = bot.send_voice(user_id, voice_response, reply_to_message_id=message.id)

        user_data = find_user_data(user_id)

        if not testing and user_data["recognise_voice_answer"]:
            time.sleep(2)

            bot.send_message(
                chat_id=message.chat.id,
                reply_to_message_id=gpt_voice_answer.message_id,
                text=f"<b>–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏</b>\n\n{text}",
                parse_mode="html")

    else:
        bot.send_message(user_id, text, reply_to_message_id=message.id)


@bot.message_handler(content_types=['text'], func=lambda message: False not in
                     [symbol not in message.text for symbol in ["/", "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è–ü–∞—Ä–∞–º–µ—Ç—Ä—ã"]])
@bot.message_handler(content_types=['voice'])
def talk_with_gpt(message):
    user_id = message.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        status_check_users, error_message = check_number_of_users(user_id)

        if not status_check_users:
            bot.send_message(message.chat.id, error_message)
            return

        check_user_exists(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —É–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_processing_answer = check_processing_answer(message, user_id)

        if is_processing_answer:
            return

        user_data = find_user_data(user_id)  # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö) –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

        if message.text:
            text = message.text

            if USE_GRAMMAR_CHECK:
                text = check_grammar(text)
            # –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —Ä–æ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            full_user_message = [text, 'user', 0, 0, 0]
            add_message(user_id=user_id, full_message=full_user_message)

            configure_stmt = user_data["text_to"]  # –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ

        else:
            text = process_stt(message, user_id)
            if not text:
                return

            if user_data["recognise_voice_answer"]:  # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                bot.send_message(message.chat.id, f"<b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n\n{text}", parse_mode="html")

            configure_stmt = user_data["speech_to"]  # –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –Ω–∏–∂–µ
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPT-—Ç–æ–∫–µ–Ω–æ–≤
        last_messages, total_spent_tokens = select_n_last_messages(user_id, COUNT_LAST_MSG)
        total_gpt_tokens, error_message = is_gpt_token_limit(last_messages, total_spent_tokens)

        if error_message:
            bot.send_message(message.chat.id, error_message)
            return

        update_user_data(user_id, column_name="processing_answer", value=1)

        wait_msg = bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –û–∂–∏–¥–∞–π—Ç–µ...")

        # –ó–∞–ø—Ä–æ—Å –∫ GPT –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        status_gpt, answer_gpt, tokens_in_answer = ask_gpt(last_messages)

        update_user_data(user_id, column_name="processing_answer", value=0)

        bot.delete_message(message.chat.id, message_id=wait_msg.message_id)

        if not status_gpt:
            bot.send_message(user_id, answer_gpt)
            return

        total_gpt_tokens += tokens_in_answer

        if configure_stmt == "speech":
            process_tts(message, user_id, answer_gpt, total_gpt_tokens)
            return

        # –ë–î: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç GPT –∏ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        full_gpt_message = [answer_gpt, 'assistant', total_gpt_tokens, 0, 0]
        add_message(user_id=user_id, full_message=full_gpt_message)

        bot.send_message(message.chat.id, answer_gpt,
                         reply_to_message_id=message.id, parse_mode="Markdown")  # –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—Å—Ç–æ–º

    except Exception as e:
        logging.error(e)
        bot.send_message(user_id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")


@bot.message_handler(commands=['settings'])
@bot.message_handler(content_types=['text'], func=lambda message: message.text == "‚öôÔ∏è–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
def settings(message):
    c_id = message.chat.id

    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    status_check_users, error_message = check_number_of_users(user_id)

    if not status_check_users:
        return

    check_user_exists(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —É–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_processing_answer = check_processing_answer(message, user_id)

    if is_processing_answer:
        return

    user_data = find_user_data(user_id)
    previous_msg = user_data['settings_msg_id']

    if message.text.lower() == "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        keyboard = make_reply_keyboard("main_menu")

        user_text_configuration = user_data["text_to"]
        user_speech_configuration = user_data["speech_to"]

        if user_text_configuration == "text":
            user_text_configuration = "–¢–µ–∫—Å—Ç–æ–≤—ã–π"

        elif user_text_configuration == "speech":
            user_text_configuration = "–ì–æ–ª–æ—Å–æ–≤–æ–π"

        if user_speech_configuration == "text":
            user_speech_configuration = "–¢–µ–∫—Å—Ç–æ–≤—ã–π"

        elif user_speech_configuration == "speech":
            user_speech_configuration = "–ì–æ–ª–æ—Å–æ–≤–æ–π"

        recognise_voice_answers = user_data["recognise_voice_answer"]

        if recognise_voice_answers:
            recognise_voice_answers = "–≤–∫–ª—é—á–µ–Ω–∞"

        else:
            recognise_voice_answers = "–≤—ã–∫–ª—é—á–µ–Ω–∞"

        bot.send_message(c_id, "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é, "
                               "–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
                               "–í–∞—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:\n\n"
                               "<b>–¢–µ–∫—Å—Ç–æ–≤—ã–µ</b> –∑–∞–ø—Ä–æ—Å—ã ‚Üí " + f"<b>{user_text_configuration}</b>" + " –æ—Ç–≤–µ—Ç\n"
                               "<b>–ì–æ–ª–æ—Å–æ–≤—ã–µ</b> –∑–∞–ø—Ä–æ—Å—ã ‚Üí " + f"<b>{user_speech_configuration}</b>" + " –æ—Ç–≤–µ—Ç\n\n"
                               f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: <b>{recognise_voice_answers}</b>",
                         reply_markup=keyboard, parse_mode="html")

        for i in range(0, 3):  # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            m_id = previous_msg - i
            bot.delete_message(chat_id=c_id, message_id=m_id)
            update_user_data(user_id, "settings_msg_id", -1)

        return

# –¥–æ–±–∞–≤–∏–ª –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫, —Ç–∞–∫ –∫–∞–∫ —É –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å reply –∏ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    if message.text.lower() in ["/settings", "‚öôÔ∏è–ø–∞—Ä–∞–º–µ—Ç—Ä—ã"]:
        keyboard = make_reply_keyboard("back_to_main_menu")

        bot.send_message(c_id, "–ü–µ—Ä–µ—Ö–æ–∂—É –≤ —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–∫...", reply_markup=keyboard)
        time.sleep(0.5)

        keyboard = make_inline_keyboard('settings', user_id)  # –º–µ–Ω—è–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        msg = bot.send_message(chat_id=c_id, text="–ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)

        if previous_msg != -1:  # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
            for i in range(0, 3):
                m_id = previous_msg - i
                bot.delete_message(chat_id=c_id, message_id=m_id)

        update_user_data(user_id, "settings_msg_id", msg.message_id)

    else:
        bot.delete_message(chat_id=c_id, message_id=message.message_id)

    bot.register_next_step_handler(message, settings)


@bot.callback_query_handler(func=lambda call: True)
def process_calls(call):
    c_id = call.message.chat.id
    m_id = call.message.message_id
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —É–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_processing_answer = check_processing_answer(call.message, user_id)

    if is_processing_answer:
        return

    bot.answer_callback_query(callback_query_id=call.id)  # —É–±–∏—Ä–∞–µ–º –¥–æ–ª–≥—É—é –∑–∞–≥—Ä—É–∑–∫—É –∫–Ω–æ–ø–∫–∏

    data = call.data
    text = "–ö–∞–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"

    if data == "recognise_voice_answer on":
        update_user_data(user_id, "recognise_voice_answer", value=1)

    elif data == "recognise_voice_answer off":
        update_user_data(user_id, "recognise_voice_answer", value=0)

    elif data == "text_to" or "text_conf" in data:
        text = "–ö–∞–∫–∏–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:"

        if "text_conf" in data:
            data = data.split()
            update_user_data(user_id, "text_to", value=data[1])

    elif data == "speech_to" or "speech_conf" in data:
        text = "–ö–∞–∫–∏–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å –æ—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–π –∑–∞–ø—Ä–æ—Å:"

        if "speech_conf" in data:
            data = data.split()
            update_user_data(user_id, "speech_to", value=data[1])

    if data != "empty_button":
        keyboard = make_inline_keyboard(data, user_id=user_id)
        try:
            bot.edit_message_text(chat_id=c_id, message_id=m_id, text=text, reply_markup=keyboard)
        except telebot.apihelper.ApiTelegramException as e:
            logging.error(e)


@bot.message_handler(commands=['stats'])
@bot.message_handler(content_types=['text'], func=lambda message: message.text == "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_statistics(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    status_check_users, error_message = check_number_of_users(user_id)

    if not status_check_users:
        return

    check_user_exists(user_id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å —É–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    is_processing_answer = check_processing_answer(message, user_id)

    if is_processing_answer:
        return

    spent_gpt_tokens = select_n_last_messages(user_id, COUNT_LAST_MSG)[1]
    speechkit_limits = []

    for limit_type in ["stt_blocks", "tts_symbols"]:

        current_amount = count_all_limits(user_id, limit_type)

        speechkit_limits.append(current_amount)

    spent_stt_blocks, spent_tts_symbols = speechkit_limits

    bot.send_message(message.chat.id, "<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                                      "<b>ü§ñ–¢–æ–∫–µ–Ω—ã –¥–ª—è GPTü§ñ</b>\n"
                                      f"<b>–õ–∏–º–∏—Ç</b>: {MAX_USER_GPT_TOKENS}\n"
                                      f"<b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</b>: {spent_gpt_tokens}\n"
                                      f"<b>–û—Å—Ç–∞–ª–æ—Å—å</b>: {MAX_USER_GPT_TOKENS - spent_gpt_tokens}\n\n"
                                      "<b>üéß–°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏üéß</b>\n"
                                      f"<b>–õ–∏–º–∏—Ç</b>: {MAX_USER_TTS_SYMBOLS}\n"
                                      f"<b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</b>: {spent_tts_symbols}\n"
                                      f"<b>–û—Å—Ç–∞–ª–æ—Å—å</b>: {MAX_USER_TTS_SYMBOLS - spent_tts_symbols}\n\n"
                                      "<b>üé§–ê—É–¥–∏–æ-–±–ª–æ–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏üé§</b>\n"
                                      f"<b>–õ–∏–º–∏—Ç</b>: {MAX_USER_STT_BLOCKS}\n"
                                      f"<b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</b>: {spent_stt_blocks}\n"
                                      f"<b>–û—Å—Ç–∞–ª–æ—Å—å</b>: {MAX_USER_STT_BLOCKS - spent_stt_blocks}",
                     parse_mode="html")


@bot.message_handler(commands=['stt', 'tts'])
def check_speechkit(message):
    user_id = message.from_user.id

    if user_id == int(ADMIN_ID):
        check_user_exists(user_id)

        is_processing_answer = check_processing_answer(message, user_id)

        if is_processing_answer:
            return

        command = message.text

        keyboard = make_reply_keyboard("exit_test")

        if command == "/stt":
            bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                             reply_markup=keyboard)
            bot.register_next_step_handler(message, send_test_stt, user_id)

        else:
            bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
                             reply_markup=keyboard)
            bot.register_next_step_handler(message, send_test_tts, user_id)

    else:
        bot.send_message(message.chat.id, "–í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ!")


def send_test_stt(message, user_id):
    if message.text and message.text == "–í—ã—Ö–æ–¥":
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–∂—É –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.",
                         reply_markup=make_reply_keyboard("main_menu"))
        return

    elif message.voice:
        stt_text = process_stt(message, user_id)

        if not stt_text:
            return

        bot.send_message(message.chat.id, f"<b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n\n{stt_text}", parse_mode="html")

        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–∂—É –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.",
                         reply_markup=make_reply_keyboard("main_menu"))

    else:
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, send_test_stt, user_id)


def send_test_tts(message, user_id):
    if message.text:
        if message.text == "–í—ã—Ö–æ–¥":
            bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–∂—É –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.",
                             reply_markup=make_reply_keyboard("main_menu"))
            return

        process_tts(message, user_id, message.text, 0, True)

        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—Ö–æ–∂—É –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.",
                         reply_markup=make_reply_keyboard("main_menu"))

    else:
        bot.send_message(message.chat.id, "–ö–∞–∂–µ—Ç—Å—è, –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        bot.register_next_step_handler(message, send_test_tts, user_id)


@bot.message_handler(content_types=CONTENT_TYPES)
def any_msg(message):
    user_id = message.from_user.id

    is_processing_answer = check_processing_answer(message, user_id)

    if is_processing_answer:
        return

    else:

        bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ —Å–∫–∞–∑–∞–Ω–æ! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ '
                                          '–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.')


if __name__ == "__main__":
    try:  # –ö–∞–∫ —è –ø–æ–Ω—è–ª, —ç—Ç–∏ –º–µ—Ç–æ–¥—ã –Ω–µ–ª—å–∑—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –≤—ã–∑—ã–≤–∞—Ç—å. –í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, –≤—ã–∑–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
        bot.set_my_commands(COMMANDS)
        bot.set_my_name(BOT_NAME)
        bot.set_my_description(BOT_DESCRIPTION)

    except telebot.apihelper.ApiTelegramException:
        pass
    logging.info("BOT: –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
